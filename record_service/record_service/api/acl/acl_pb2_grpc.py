# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import acl_pb2 as acl__pb2


class AclStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.IsPermissionedForRead = channel.unary_unary(
            "/Acl/IsPermissionedForRead",
            request_serializer=acl__pb2.PermissionRequest.SerializeToString,
            response_deserializer=acl__pb2.PermissionResponse.FromString,
        )
        self.IsPermissionedForWrite = channel.unary_unary(
            "/Acl/IsPermissionedForWrite",
            request_serializer=acl__pb2.PermissionRequest.SerializeToString,
            response_deserializer=acl__pb2.PermissionResponse.FromString,
        )
        self.ModifyPermission = channel.unary_unary(
            "/Acl/ModifyPermission",
            request_serializer=acl__pb2.ModifyPermissionRequest.SerializeToString,
            response_deserializer=acl__pb2.ModifyPermissionResponse.FromString,
        )
        self.AddFile = channel.unary_unary(
            "/Acl/AddFile",
            request_serializer=acl__pb2.AddFileRequest.SerializeToString,
            response_deserializer=acl__pb2.AddFileResponse.FromString,
        )
        self.GetAllFilesForUser = channel.unary_unary(
            "/Acl/GetAllFilesForUser",
            request_serializer=acl__pb2.GetFilesRequest.SerializeToString,
            response_deserializer=acl__pb2.ListOfFiles.FromString,
        )
        self.GetAllUsersForFile = channel.unary_unary(
            "/Acl/GetAllUsersForFile",
            request_serializer=acl__pb2.GetUsersRequest.SerializeToString,
            response_deserializer=acl__pb2.ListOfUsers.FromString,
        )


class AclServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def IsPermissionedForRead(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def IsPermissionedForWrite(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ModifyPermission(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AddFile(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetAllFilesForUser(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetAllUsersForFile(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AclServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "IsPermissionedForRead": grpc.unary_unary_rpc_method_handler(
            servicer.IsPermissionedForRead,
            request_deserializer=acl__pb2.PermissionRequest.FromString,
            response_serializer=acl__pb2.PermissionResponse.SerializeToString,
        ),
        "IsPermissionedForWrite": grpc.unary_unary_rpc_method_handler(
            servicer.IsPermissionedForWrite,
            request_deserializer=acl__pb2.PermissionRequest.FromString,
            response_serializer=acl__pb2.PermissionResponse.SerializeToString,
        ),
        "ModifyPermission": grpc.unary_unary_rpc_method_handler(
            servicer.ModifyPermission,
            request_deserializer=acl__pb2.ModifyPermissionRequest.FromString,
            response_serializer=acl__pb2.ModifyPermissionResponse.SerializeToString,
        ),
        "AddFile": grpc.unary_unary_rpc_method_handler(
            servicer.AddFile,
            request_deserializer=acl__pb2.AddFileRequest.FromString,
            response_serializer=acl__pb2.AddFileResponse.SerializeToString,
        ),
        "GetAllFilesForUser": grpc.unary_unary_rpc_method_handler(
            servicer.GetAllFilesForUser,
            request_deserializer=acl__pb2.GetFilesRequest.FromString,
            response_serializer=acl__pb2.ListOfFiles.SerializeToString,
        ),
        "GetAllUsersForFile": grpc.unary_unary_rpc_method_handler(
            servicer.GetAllUsersForFile,
            request_deserializer=acl__pb2.GetUsersRequest.FromString,
            response_serializer=acl__pb2.ListOfUsers.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("Acl", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
